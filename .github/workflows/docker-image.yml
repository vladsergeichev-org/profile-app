name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v4
#     - name: Build the Docker image
#       run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
jobs:
  build_and_push_to_docker_hub:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v4    
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/profile-app:latest

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build_and_push_to_docker_hub
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         passphrase: ${{ secrets.PASSPHRASE }}
  #         script: |
  #           docker-compose down
  #           docker rmi ${{ secrets.DOCKER_USERNAME }}/projekt-app:latest
  #           echo "Updating .env file with new secrets"
  #           rm .env
  #           touch .env
  #           echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
  #           echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #           echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #           echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
  #           echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
  #           echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
  #           echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
  #           ...
  #           docker-compose up -d --build
  #           docker-compose exec web python manage.py collectstatic --noinput
  #           docker-compose exec web python manage.py migrate --noinput

  # send_message:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - uses: appleboy/telegram-action@master
  #       with:
  #         to: ${{ secrets.TELEGRAM_TO }}
  #         token: ${{ secrets.TELEGRAM_TOKEN }}
  #         message: Deployment of Projekt-app is successful!
